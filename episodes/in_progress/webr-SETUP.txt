SETUP — Quarto + revealjs + webR (Positron, Windows)
=========================================================

Mål
----
Få webR-kørende slides og website, og udgive til GitHub Pages – uden submodules.

Forudsætninger
--------------
- Positron eller RStudio + Quarto installeret (quarto check)
- Git installeret og konfigureret (git --version)
- GitHub-konto (her: chrbknudsen)

Mappestruktur (minimum)
-----------------------
<projekt-rod>/
  _quarto.yml
  _extensions/
    live/            ← kopieres ind i trin 4
  slides/
    demo.qmd         ← din slide, har include-linje jf. trin 5
  docs/              ← genereres af `quarto render`


Trin 0 - opret folder - vi er i Positron
-----------------------
- opret en folder. Ækvivalent til et projekt i Rstudio

Trin 1 — Quarto website
-----------------------
- Opret _quarto.yml i projektroden som type: website, output-dir: docs.
- Tilføj navbar-link til slides/demo.qmd.
- Evt. theme under format.live-html.theme: cosmo.

Dette gøres ved at sætte dette indhold ind i _quarto.yml:
--indsæt start --
project:
  type: website
  output-dir: docs

website:
  title: "Slides + webR"
  navbar:
    left:
      - text: "Demo"
        href: slides/demo.qmd

format:
  live-html:
    theme: cosmo

-- indsæt slut --

Trin 2 — Git-repo og branch (på terminalen)
---------------------------
git init
git add .
git commit -m "første commit"
git branch -M main

Trin 3 — Hent 'quarto-live' som ZIP (ingen submodule)
-----------------------------------------------------
- Gå til https://github.com/r-wasm/quarto-live (code - download zip)
- Download ZIP og udpak et vilkårligt sted uden for projektmappen.

Trin 3.2 hent en quarto-extention som ZIP
-------------
- Hentes her: https://github.com/coatless/quarto-webr

Trin 4 — Installer 'live'-extension fladt i projektet
-----------------------------------------------------
- Kopiér mappen fra ZIPpen:  quarto-live/_extensions/live
- Ind i projektet som:       <projekt-rod>/_extensions/live
- Tjek at disse tre findes:
  _extensions/live/live.lua
  _extensions/live/_extension.yml
  _extensions/live/_knitr.qmd

Trin 5 — Knyt webR ind i dine slides
------------------------------------
- opret slides (eller et ordinært quarto dokumnet). 
- for dette eksempel kalder vi den for demo.qmd
- i yaml headere skal der være:
---start indsæt ---

title: "webR demo"
format: live-revealjs
engine: knitr
filters:
  - webr
webr:
  packages: ["dplyr"]
--- slut indsæt ---
- bemærk at fra filters til ] ikke er nødvendig. Med mindre du ønsker at der er hurtig adgang til dplyr når siden åbnes.
- alternativt kan man i slides i de ordinære codechunks - installere pakken med webr::install("dplyr"). Men det tager tid...
- mon ikke det virker med en del andre pakker?
- I dine slides-filer (fx slides/demo.qmd), lige efter YAML:
  {{< include ../_extensions/live/_knitr.qmd >}}
- Render/preview køres altid fra projektroden (samme mappe som _quarto.yml).
- Når du vil have en kodeblok med r-kode der kan eksekveres indsætter du som sædvanlig. Men som {webr} i stedet for r
Trin 6 — Kør lokalt
-------------------
quarto preview
- Åbn i ekstern browser (localhost-URL). Undgå file:// visning.

Trin 7 — Udgiv til GitHub Pages (manuel render)
-----------------------------------------------
- Opret repo på GitHub: chrbknudsen/webr-test (tomt repo).
git remote add origin https://github.com/chrbknudsen/webr-test.git
quarto render
git add .
git commit -m "site"
git push -u origin main
- GitHub → Settings → Pages → Deploy from a branch → Branch: main → Folder: /docs
- URL: https://chrbknudsen.github.io/webr-test/

(Valgfrit) CI workflow
----------------------
- Opret .github/workflows/quarto-gh-pages.yml, der:
  * checkout → setup Quarto → quarto render → commit docs/ til main
- Fordel: `git push` er nok; GitHub bygger og udgiver automatisk.

opret filen .github/workflows/quarto-gh-pages.yml med dette indhold
name: Quarto Publish

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true     # så LaTeX er tilgængelig hvis du laver PDF
          # pandoc: true    # hvis du vil sikre Pandoc-install

      - name: Render site
        run: quarto render

      - name: Commit rendered site
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs
          git commit -m "Render site" || echo "No changes to commit"
          git push


Fejltjek (kort)
---------------
- Include-stier løses relativt til topdokumentet (din slide):
  brug ../_extensions/live/_knitr.qmd når filen ligger i slides/.
- Hvis webR brokker sig over SharedArrayBuffer/headers: brug `quarto preview`
  og åbn i ekstern browser (localhost), ikke file://.
- Render fra projektroden (der hvor _quarto.yml ligger).
- Hold _extensions/live som flad, lokal mappe. Undgå at lægge hele
  'quarto-live' repoet under _extensions/, så slipper du for Quarto, der
  forsøger at indeksere fremmede docs.
